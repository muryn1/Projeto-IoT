[
    {
        "id": "f916acdb50e6b8df",
        "type": "tab",
        "label": "Flow 8",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e1305f2b1b2a57a9",
        "type": "mqtt in",
        "z": "f916acdb50e6b8df",
        "name": "Subscrever Corrente",
        "topic": "sensor/corrente",
        "qos": "1",
        "datatype": "auto",
        "broker": "brokerConfig",
        "inputs": 0,
        "x": 110,
        "y": 200,
        "wires": [
            [
                "a0047a2aafc1efe2"
            ]
        ]
    },
    {
        "id": "a0047a2aafc1efe2",
        "type": "function",
        "z": "f916acdb50e6b8df",
        "name": "Processar Dados",
        "func": "// Validação básica dos dados\nif (isNaN(parseFloat(msg.payload))) {\n    node.warn(\"Valor inválido recebido: \" + msg.payload);\n    return [null, null];\n}\n\nlet corrente = parseFloat(msg.payload);\n\n// Saída 1: apenas corrente para InfluxDB\nlet msg1 = {\n    payload: {\n        corrente: corrente\n    }\n};\n\n// Saída 2: número puro para Dashboard\nlet msg2 = { payload: corrente };\n\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 200,
        "wires": [
            [
                "e5e999f7e945ea18",
                "81a62c960a066862"
            ],
            [
                "8811fe6e63b3ce89",
                "70aaa9ab04b082e8"
            ]
        ]
    },
    {
        "id": "e5e999f7e945ea18",
        "type": "function",
        "z": "f916acdb50e6b8df",
        "name": "Verificar Alertas",
        "func": "// Limites de corrente\nvar limiteNormal = 5.0;  // Corrente normal\nvar limiteAlerta = 10.0;  // Corrente crítica\n\nvar corrente = msg.payload.corrente;\nvar qualidade = msg.payload.qualidade;\n\n// Estado anterior salvo no contexto da função\nvar estadoAnterior = context.get(\"estado\") || \"normal\";\n\n// Determinar o estado atual\nvar estadoAtual;\nif (qualidade === 0) {\n    estadoAtual = \"qualidade_baixa\";\n} else if (corrente > limiteAlerta) {\n    estadoAtual = \"critico\";\n} else if (corrente > limiteNormal) {\n    estadoAtual = \"alerta\";\n} else {\n    estadoAtual = \"normal\";\n}\n\n// Só enviar notificação se o estado mudou\nif (estadoAtual !== estadoAnterior) {\n    context.set(\"estado\", estadoAtual);\n    \n    if (estadoAtual === \"critico\") {\n        msg.topic = \"ALERTA CRÍTICO\";\n        msg.payload = \"Corrente crítica: \";\n        return msg;\n    }\n    else if (estadoAtual === \"alerta\") {\n        msg.topic = \"ALERTA\";\n        msg.payload = \"Corrente acima do normal: \";\n        return msg;\n    }\n    else if (estadoAtual === \"qualidade_baixa\") {\n        msg.topic = \"ALERTA DE QUALIDADE\";\n        msg.payload = \"Dados com baixa qualidade.\";\n        return msg;\n    }\n    else if (estadoAtual === \"normal\" && estadoAnterior !== \"normal\") {\n        msg.topic = \"NORMAL\";\n        msg.payload = \"Corrente voltou ao normal: \";\n        return msg;\n    }\n}\n\n// Se o estado não mudou, não enviar notificação\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 180,
        "wires": [
            [
                "6a9ae52e08358020"
            ]
        ]
    },
    {
        "id": "6a9ae52e08358020",
        "type": "ui_toast",
        "z": "f916acdb50e6b8df",
        "position": "top right",
        "displayTime": "60",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 750,
        "y": 180,
        "wires": []
    },
    {
        "id": "8811fe6e63b3ce89",
        "type": "ui_chart",
        "z": "f916acdb50e6b8df",
        "name": "Gráfico de Consumo",
        "group": "3ff1c660b502a1f0",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Consumo de Energia",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 580,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "70aaa9ab04b082e8",
        "type": "ui_gauge",
        "z": "f916acdb50e6b8df",
        "name": "Medidor Atual",
        "group": "3ff1c660b502a1f0",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Corrente (A)",
        "label": "Amperes",
        "format": "{{value}}",
        "min": 0,
        "max": "400",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "10",
        "seg2": "15",
        "diff": false,
        "className": "",
        "x": 600,
        "y": 300,
        "wires": []
    },
    {
        "id": "81a62c960a066862",
        "type": "influxdb out",
        "z": "f916acdb50e6b8df",
        "influxdb": "e8130ec55995baeb",
        "name": "Armazenar Dados InfluxDB",
        "measurement": "consumo _energia",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "IPB",
        "bucket": "IoT Project",
        "x": 580,
        "y": 140,
        "wires": []
    },
    {
        "id": "brokerConfig",
        "type": "mqtt-broker",
        "name": "Broker EMQX",
        "broker": "broker.emqx.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3ff1c660b502a1f0",
        "type": "ui_group",
        "name": "Controlo Consumo Energia",
        "tab": "6166fb16121a49fa",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "e8130ec55995baeb",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "6166fb16121a49fa",
        "type": "ui_tab",
        "name": "Projeto IoT",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    }
]
